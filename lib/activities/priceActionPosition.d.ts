import { WebSocket } from "ws";
import { CurrentPriceData } from "../interfaces/currentPriceData";
import { SurroundingKeyLevels } from "../interfaces/surroundingKeyLevels";
import { SupplyZones, DemandZones } from "../interfaces/supplyDemandZones";
import { PositionSetup } from "../interfaces/positionSetup";
import { OptionsSelection } from "../interfaces/optionsSelection";
import { OpenPositionSignal } from "../interfaces/openPositionSignal";
import { PrinciplesAndParams } from "../interfaces/UserPrinciples";
import { TokenJSON } from "../interfaces/token";
import { GetOrderResponse, OrdersConfig, PlaceOrdersResponse } from "../interfaces/orders";
import { Account } from "../interfaces/account";
import { OptionChainConfig, OptionChainResponse, OptionDetails, OptionMap } from "../interfaces/optionChain";
export declare function is_market_open(): Promise<boolean>;
export declare function get_surrounding_key_levels(current_price: number, key_levels: number[]): Promise<SurroundingKeyLevels>;
export declare function is_demand_zone(current_price: number, demand_zones: DemandZones[]): Promise<number[][] | null>;
export declare function find_demand_zone(current_price: number, demand_zones: DemandZones[]): Promise<number[][] | null>;
export declare function is_supply_zone(current_price: number, supply_zones: SupplyZones[]): Promise<number[][] | null>;
export declare function find_supply_zone(current_price: number, supply_zones: SupplyZones[]): Promise<number[][] | null>;
export declare function get_current_price(wsUri: string, login_request: object, market_request: object, demand_zones: DemandZones[], supply_zones: SupplyZones[]): Promise<CurrentPriceData>;
export declare function get_position_setup(surrounding_key_levels: SurroundingKeyLevels, demand_zone: number[][], supply_zone: number[][]): Promise<PositionSetup>;
export declare function getOptionsSelection(position_setup: PositionSetup, symbol: string, access_token: string): Promise<OptionsSelection | null>;
export declare function checkAccountAvailableBalance(access_token: string, account_id: string): Promise<number>;
export declare function openPosition(options: OptionsSelection, optionType: string, budget: number, account_id: string, access_token: string): Promise<PlaceOrdersResponse | null>;
export declare function checkIfPositionFilled(order_id: PlaceOrdersResponse, account_id: string, access_token: string): Promise<number>;
export declare function waitToSignalOpenPosition(wsUri: string, login_request: object, book_request: object, time_sales_request: object, position_setup: PositionSetup, options: OptionsSelection, budget: number, account_id: string, access_token: string): Promise<OpenPositionSignal>;
export declare function getOptionSymbol(order_id: PlaceOrdersResponse, account_id: string, access_token: string): Promise<string>;
export declare function cutPosition(symbol: string, quantity: number, account_id: string, access_token: string): Promise<PlaceOrdersResponse>;
export declare function closePosition(symbol: string, quantity: number, account_id: string, access_token: string): Promise<PlaceOrdersResponse>;
export declare function waitToSignalCutPosition(wsUri: string, login_request: object, book_request: object, time_sales_request: object, symbol: string, quantity: number, demandOrSupply: string, position_setup: PositionSetup, account_id: string, access_token: string): Promise<number>;
export declare function waitToSignalClosePosition(wsUri: string, login_request: object, book_request: object, time_sales_request: object, symbol: string, quantity: number, demandOrSupply: string, position_setup: PositionSetup, account_id: string, access_token: string): Promise<PlaceOrdersResponse>;
export declare function getLoginCredentials(client_id: string): Promise<TokenJSON>;
export declare function getUserPrinciples(access_token: string): Promise<PrinciplesAndParams>;
export declare function getAccount(access_token: string, account_id: string): Promise<Account>;
export declare function placeOrder(access_token: string, account_id: string, order_data: OrdersConfig): Promise<PlaceOrdersResponse>;
export declare function getOrder(access_token: string, account_id: string, order_id: string): Promise<GetOrderResponse>;
export declare function getOptionChain(access_token: string, option_chain_config: OptionChainConfig): Promise<OptionChainResponse>;
export declare function filterOptionResponse(optionMap: OptionMap, optionType: string): OptionDetails | null;
export declare function websocketClient(url: string): WebSocket;
export declare function sendClientRequest(client: WebSocket, request: object): Promise<void>;
export declare function waitForClientConnection(client: any): Promise<void>;
export declare function waitForClientLoginMessage(client: any): Promise<void>;
//# sourceMappingURL=priceActionPosition.d.ts.map